
The Frama-C development team is proud to announce the availability
of Frama-C, the framework for the development of collaborating
static analyzers for the C language. Many analyzers are provided in the
distribution, including a value analysis plug-in that provides variation
domains for the variables of the program, and Jessie, a plug-in
for computing Hoare style weakest preconditions.

Frama-C is Open Source software. It is written in Ocaml and relies
on the CIL (C Intermediate Language) library.

Additional information, source code and documentation for Frama-C
are available now at http://frama-c.cea.fr/. Binary distributions for
various popular environments will be forthcoming.

For the Frama-C development team


------------------------------------------------------------------------

Since Jessie is a bridge between
Frama-C and Why

----------------------------------------

Yes, having two versions of why hanging around is an issue. That said,
the Frama-C documentation is a bit misleading. In fact, the jessie
plugin is heavily dependent upon why and requires a precise version of
why to work, but if the two release cycles are synchronized enough (as
this was the case for frama-c-20080502 and why-2.13), this should not be
an issue. The godi[1] package (apps-frama-c) is by default built
against the jc library provided by apps-why and not the local one.

---------------------------------------------

Regarding Caduceus and Frama-C/Jessie, pointer arithmetic is supported
but pointer casts are not (casts between primitive types such as int,
long, float, etc. are supported, though).
To complement Jean-Christophe's answer, it depends what you mean
by "Frama-C/Jessie". Frama-C is an analysis framework where each
plug-in (Jessie is one such plug-in) is free to define its own limitations
on the subset of C that it handles. Frama-c itself has very few
intrinsic limitations, and for instance, the value analysis
that constitutes one of the many other plug-ins in Frama-C
allows heterogenous pointer casts, such as casts from pointer to
structure to pointer to basic type, and arbitrary pointer arithmetics.

The theoretical bases for the sound collaboration of plug-ins
with different limitations (for instance, different memory models)
will be laid out in the future, but until this time,
Frama-C can already be used to
analyze programs that fit within the intersection of the
subsets of C accepted by all the plug-ins used for the analysis.


-----------------------------------------------

Your assessment of what Frama-C currently provides,
and what it should provide in terms of fine-grained 
collaboration between plug-ins, is perfectly correct.

The bas news is that the fine-grained collaboration between
plug-ins is not done yet. The good news is that we will not
consider the Frama-C project completed until it is done.
This will indeed be one of the key features
of Frama-C Fe (or thereabout) :)

------------------------------------------------------

1) What is the difference between Caduceus annotation language and ACSL?

ACSL is strongly inspired from Caduceus annotation language, which is itself
strongly inspired from JML. ACSL is meant to be independent from a specific
tool, technique or memory model, while Caduceus annotation language is
strongly tied to deductive verification and the component-as-array memory
model (aka Burstall-Bornat memory model), where pointer casts and unions are
not allowed. ACSL only relies on what the C standard guarantees, and its aim
is to allow expressing any safety property (not progress properties) on a C
program. E.g., it is possible to have casts in ACSL annotations, sets of
terms, sets expressed in comprehension notation, etc.

2) What is the difference between Frama-C and Caduceus?

Frama-C is a platform that allows many techniques to be applied to analyse a
C program. We are increasingly combining analyses (plugins), so that in the
end you should be able to prove many properties by abstract interpretation,
slice the program for the remaining properties and prove them by deductive
verification inside Why, all automatically. Frama-C aims at supporting all
of C, which it does already, while plugins have their own limitations. The
Jessie plugin is the one that translates C programs into an intermediate
language inside the Why platform, so that Frama-C can be used to perform
deductive verification in the same way as Caduceus. We just started to
support casts and unions for experiments, but we have not released this part
yet. It should be the case ultimately that constructs not supported in
Caduceus are supported in this Jessie plugin.

Of course, we strongly encourage all users of Caduceus to switch to Frama-C,
which should consist mostly in adding semicolons at the end of every clause
in annotations ...



----------------------------------------------------------------

Indeed, \separated is not implemented in the version of Frama-C released,
and \base_addr is not yet implemented in the Jessie plugin (although it is
implemented in Frama-C).
Hopefully the next release will solve these problems :0)

----------------------------------------------------------------


the normal way of treating separation in Jessie is to divide
heap into regions automatically ([mt]works in lithium), which will become the default in the next
release. With only one region for memory, your example is proved with any of
Z3, Alt-Ergo and Simplify (not Yices though).

We found that automatic separation is usually what you need, although there
will be an option -jessie-no-regions to avoid such splitting of memory.

Given a function signature:

void array_cpy(int* a, int n, int* b)

the regions inferred for [a] and [b] depend on the code of function
[array_cpy] and the functions it calls (possibly recursively). These regions
are assumed different, unless the code explicitly aliases them, say by
assigning [a] to [b]. Then, the code of function [array_cpy] can be easily
verified in this separated context, while it can still be called in a
context where [a] and [b] may alias if:

1) [a] and [b] are only read through in a call to [array_cpy]
2) [a] and [b] are accessed at separated locations

There will be an extensive section of the Jessie manual dedicated to this
matter.

---------------------------------------------------------------------

In the following discussion, whenever Yannick mentions Frama-C, please 
note that it refers *only* to the Jessie plugin in the non distributed 
development version.

- It is probably not a good idea for this plugin to introduce specific 
extensions to the syntax or semantics of ACSL. It breaks the possibility 
of plugins to interoperate safely.
- The syntax and semantics of ACSL are decided during weekly meetings of 
the ACSL steering committee. There is not yet a clear consensus 
regarding the extensions proposed by Yannick (declspec, default non 
aliasing property et al.). We are actively working on these. The results 
will be published on this list asap.
---------------------------------------------------------------------------
Frama-C uses by default cpp to preprocess source files, but you may change
this by setting option -cpp-command. Otherwise, Frama-C relies on CIL to
link source files and generate a unique abstract syntax tree to analyse.

HTH,
Yannick

On Thu, Oct 9, 2008 at 8:13 PM, Satrajit Roy <satrajit.roy at gmail.com> wrote:

> Hi,
>
> I just downloaded Frama-C on my Windows box and it seems that it uses 'gcc'
> by default and I couldn't find any way to change it to use 'Visual C'. Is
> there a way to make Frama C use Vsiual C?
>
-------------------------------------------------------------------------------------

You seem to get the normal behavior of Frama-C. It parses your code and
>> annotations, and it returns, unless a plugin is selected, like value
>> analysis with option -val.
>> If you want to perform deductive verification on your code using the
>> Jessie plugin, you should call it with option -jessie-analysis. Is that what
>> you want?
----------------------------------------------------------------
frama-c-gui -val -cpp-command 'CL.exe /C /E %1 > %2' x.c

-------------------------------------------------------

I checked your example with the current version of Frama-C, and it is proved
correct. Frama-C sticks to the semantics of C which, contrary to what you
say, returns the number of array elements between [a] and [b] for the
pointer difference [b - a]. Thus, your last example with sizeof is
incorrect.
--------------------------------------------------------

ACSL is a language whose specification is given by the document available
  on http://frama-c.cea.fr/acsl.html
- Frama-C in its current state supports only parts of ACSL. These parts
  are documented in the acsl-implementation.pdf documentation.
  Each acsl-implementation.pdf is specific to the version of Frama-C 
  with which it is distributed. The semantics of the revision bars and
  colors is given in the preamble of the document.
- The next release will come with a Changelog explaining the increments.
  At this time ACSL support of Frama-C is not yet freezed.
- Plugins shall provide documentation describing what part of ACSL
  they can understand.

----------------------------------------------------------

Hi!

>I'm going to try to build some extended example of frama-c with proof of
>LTL properties, probably realtime properties, and probably some runtime
>check integration. Also I'd like to build an example proof of validation
>of the code and model, say validation for an automata model.

>As far as I see now I should extend axioms and write some logic as well.

>Do you think it's something doable?

The ACSL annotation language does not have any constructions to express
temporal properties. So my opinion, for what it's worth, is that
encoding LTL properties in ACSL with the help of ghost code is probably
doable but is going to require a lot of elbow grease.

Also, if you think about it, the good thing
about ACSL properties as opposed to run-time assertions is that they
can be composed, allowing a modular approach to the difficult problem
of building sizable software that works.
Typically, once the contract for one particular function is defined,
writing the function and proving that the function satisfies the
contract on the one hand and on the other hand writing the calling function,
proving that the precondition of the contract is satisfied at the call site
and that the calling function satisfies its own specification have become
two separate, independent, smaller sub-problems that can even be
assigned to different people. And you know that your program will work
when you put the pieces of the puzzle together!
With run-time assertion checking you can't test the calling function
until you have something to execute for the called function.

Although Frama-C offers the possibility to write ghost code to help
where ACSL alone does not allow to express the desired properties,
when you take this road I am not sure if you can retain the modularity
that makes the approach promising. 

Yes, the first step would be to think about the axioms and logic functions
that express the properties that you are interested in. Do not hesitate 
to show your experiments on this list, everyone would be very interested
and there are experts (not me!) that read it and that will be able to provide
feedback.

----------------------------------------------------------------

All ACSL constructions are meant to be supported by Frama-C at some
point 

-----------------------------------------------------------------
frama-c -jessie-analysis -jessie-int-model exact -jessie-no-regions -jessie-gui fill.c


------------------------------------------------------------------

Frama-C is Open Source and Frama-C's users
are bright and motivated people.
It is probably a good, efficient way
to work to send them patches in order to
fix the problem that is blocking them and allow them
to further their tests, so that the next release may work
really well for what is supposed to work already.


-----------------------------------------------------------------

You must realize it is in general hard to duplicate in the logic all the
details of implementation, and it is not generally useful to do this.
Logical annotations should be here to help proving some useful property
about the program, not to duplicate the same amount of information as found
in the program. It is all the more important to realize this if you want to
work with automatic provers, that cannot handle complex VC automatically.


---------------------------------------------------------------------


About bugs in specifications: they can happen. It is possible to write
contracts that are not what you intended but happen to be satisfied by
the function.
Firstly, these specification bugs only go uncaught when
the function incidentally satisfies also the buggy specification. You  
are in
effect writing what you want the function to do twice, once in the code
and once in the specification, and the redundancy catches many errors
that would otherwise go unnoticed.
Secondly, these bugs are generally caught at the next level of  
specification,
when you realize that you do not have enough hypotheses to prove that
the caller to the function with the wrong contract satisfies its own  
contract.
In another, but very specific, sense, bugs in specifications can not  
happen.

--------------------------------------------------------------------

would it be possible for you to make a self-contained analysis
project that contained all the headers used by the C files and
to post it somewhere?

Frama-C does not need to execute the code, so it is fine to analyze
a linux program on any other platform, but the headers must be
provided even if (on a Linux platform) they are in the system  
directories.

--------------------------------------------------------------------

PS: Note that Frama-C is intended to be a portable platform.
The target platform for the analysis can be chosen independently from
where you are running the analyzer. You can analyze 64-bit programs
on a 32-bit machine and embedded code intended for an ARM
environment on Windows. 


--------------------------------------------------------------------

> A new release of Why platform is available on the Web page. It is
 > synchronized (e.g. compatible) with Frama-C Lithium 20081201.
 >
 > Note for Windows users: this distribution indeed contains a
 > specialized
 > version of the why-cpulimit command. For users who experience a know
 > problem in GWhy that is provers that never stop, you should give a try
 > to this new version. Please report any successful or failing
 > experience...

So, could you try it, and report if it works now?

A mistake of us was that this new windows-specific version of 
why-cpulimit has not been included in the Lithium release.
--------------------------------------------------------------------

Could you try to set FRAMAC_SHARE to a windows like path with forward
slahes like
C:/Frama-C/share/frama-c 
...
was to put the variable WHYLIB equal to:

C:/Frama-C/share/frama-c/why

Sorry, I did not understand you were using a cygwin shell. In that case 
you should do

export WHYLIB=/usr/local/Frama-C/share/frama-c/why

I exported the environment variables WHYLIB and FRAMAC_SHARE as shown below.

 

$ export WHYLIB="C:/cygwin/usr/local/Frama-C/share/frama-c/why"

 

$ export FRAMAC_SHARE="C:/cygwin/usr/local/Frama-C"

 

------------------------------------------------------------------

Although this is only my opinion, I wouls suggest that, 
from the standpoint of generalist distributions,
the Frama-C package should be considered as the package
that provides Why. Why? Each Frama-C release comes with
what is the latest version of Why at that point*.
Although a serious user of why understands the difference
between the two and may need a Why feature that was added
since the last Frama-C release (nowadays about every
three months, and likely to evolve in a more flexible system),
a serious user of Why is already likely to compile Why
from sources instead of using 
his distribution's binary package.


Yes, the next Frama-C major version (aka Beryllium) will not be 
distributed with a Why version anymore.

For Lithium version: we have taken care of this fact by releasing a Why 
version synchronized with Frama-C. So for a package, my suggestion is to 
build two packages and make a dependency of Frama-C on that precise Why 
package.

Of course, even better will be to provide more small packages, like 
Frama-C without the Jessie plugin, without the GUIs, etc. But it would 
require much harder work, for small benefit since most users would be OK 
for having everything by default

---------------------------------------------------------------------



I recommend not to modify regular system headers. You can simply augment 
your source code with contracts for functions you use (or put them in a 
separate file that you #include). e.g

/*@ requires \valid(buf+(0..count-1));
   @ assigns errno, buf[0..count-1];
   @*/
ssize_t read(int fd, void *buf, size_t count);

In principle, Frama-C should be shipped with contracts for standard 
library functions, but this is not an easy thing to do: it is not clear 
at all what would be a "universal" contract for all use of thos functions...

------------------------------------------------------------------


valid   (green dot)     : the VC is a true formula
invalid (red dot)       : the VC is not a true formula
unknown (question mark) : it is not known if the formula is true or not
timeout (scissor)       : the prover did not answer before the timeout 

                           (10 s by default)
failure (tools)         : the prover answer was not recognized
         (hard disk)     : this VC is already known valid in GWhy cache

* the shape of the icons varies among users, becasue these are builtin 
GTK icons, which depend on the current gtk theme

* in principle, invalid should be identified with unknown, because 
provers are incomplete can very rarely say that a formula is definitely 
not true. historically, Simplify answers is either "valid" or "invalid", 
where "invalid" indeed means "unknown". The GWhy maps those invalid to 
the question mark but the textual output might still classified them as 
invalid.

------------------------------------------------------------------------
"logical functions offset_min
and offset_max [are used] to express the minimal/maximal offset at
which a pointer can be indexed". 
------------------------------------------------------------------------

Regarding the problem of code highlighting under GWhy, this is *probably* due - under Cygwin - to CR/LF DOS' ending lines.
By dos2unix-ing your source files, this should be OK!

----------------------------------------------------------------------------
My overall comments regarding Frama-C:

 * I'm rather pleased with the software. The documentation is useful
(good index for ACSL) even if not complete (Jessie), the software is
working and I had only a few blocking bugs. Once you know a few idoms
(loop invariants, non terminating functions, ...), it is rather easy
for a basic engineer like me to express properties and check them;

 * Frama-C/Jessie helped me to find bugs in my original program,
either benign ones (e.g. the potential overflow of counters) or more
serious ones (e.g. program behaviour when reading too short candidate
list).

 * A working subset of the Frama-C ecosystem is Free Software, making
easier to use it in various settings. I hope the few remaning
licensing issues[2] will be cleared out, allowing inclusion of Frama-C
into various Linux distributions;

 * On my program, Jessie/Alt-Ergo GUI are becoming a bit slow,
compared to toy example I have tested. It might come from my
particular program, the way I have written or structured the code. I
would be interested to hear of any way I could improve this;

 * I haven't dug yet into the development of plugins or into the
Frama-C GUI (slicing, ...) so I won't comment on them, even if they
seem quite interesting.

-----------------------------------------------------------

>>//===== f.h
>>#define vx 0.0
 
>>//===== f.c file
>>#include "f.h"
>>float main(float v) { /*@ assert v<=vx ; */ return v; }
 
>>//===== stdout of frama-c f.c
>>[preprocessing] running gcc -C -E -I.   e1.c
>>File e1.c, line 6, characters 14-16:
>>Error during analysis of annotation: unbound logic variable vx
>>e1.c:6: Warning: ignoring logic code annotation

in this case, can't you just use "frama-c -pp-annot f.c -print" :

------------------------------------------------------

> I'm currently working on a larger source code of about 100  
> functions, for a total of 10K Sloc.
> Value Analysis is performed on the whole code through a classical  
> command line like:
> frama-c-gui -val ...
>
> After some computations (~40 minutes elapsed time), Frama-C's GUI is  
> displayed.

The 40 minutes and the ~500Mb of memory are the resources used
by the value analysis itself. You can avoid the wait the next time
you need the results of the value analysis by using
the -save / -load options, typically :
frama-c -val *.c -save state
frama-c-gui -load state


-----------------------------------------------------------

> typedef struct { float u; float y;} LABS;
> void abs (LABS *p)
> {
>   switch (0.0 < p->u)
>   {
>     case 0 :
>       p->y = -p->u;
>       break;
>     default :
>       p->y = p->u;
>       break;
>   }
> }
>
>  "frama-c -val -slevel 100 foo.c"

The author is concerned that the value analysis fails to
determine that p->y is a positive float.

Unfortunately there are a number of limitations to work around:

1/ Frama-C must be told to turn the switch into cascading if-then-elses
with the option -simplify-cfg

2/ The value analysis does not handle strict comparisons between
floats (such as 0.0 < p->u) and treats them conservatively as if
equality was possible.

3/ To treat this example automatically, the value analysis would have
to handle the relationship between the fact that the condition is 0 or 1
and the value in p->u. Unfortunately, this is one more indirection than
it can handle.

You can separate the cases beforehand so that it notices the
relationship, but then you have to be careful about point 2/ above
(any substate where the condition 0.0 < p->u can be both true or
false is necessarily approximated, and because of 2/ you have to
have such a substate, so you need to make this
substate as small as possible).

The example, revisited :

typedef struct { float u; float y;} LABS;
void abs (LABS *p)
{
   //@ assert p->u >= 0.0001 || 0. <= p->u <= 0.0001 || p-> u <= 0.;
   switch (0.0 < p->u)
   {
     case 0 :
       p->y = -p->u;
       Frama_C_show_each_A(p->y);
       break;
     default :
       p->y = p->u;
       Frama_C_show_each_B(p->y);
       break;
   }
}

Command line :

frama-c -val -slevel 100 /tmp/t.c  -main abs -simplify-cfg -context- 
width 1 -context-valid-pointers

Results:

/tmp/t.c:4: Warning: Assertion got status valid.
-> the assertion is used as a hint but does not entail any
additional proof obligation.

Values for function abs:
   star_p[0].u E [-1.79769313486e+308 .. 1.79769313486e+308]
         [0].y E [-0.0001 .. 1.79769313486e+308]
-> almost what you wanted :(

Sorry for the disappointing results in this case.


-----------------------------------------------------------------------------


>1. What C/C++ standards are supported by the parser being used in 
>Frama-C? (C89, C99, C++ 2003, GNU Extensions, ...)

Frama-C handles most of C99 (as far as I remember, only
the complex type defined in C99 is not handled),
and most of GCC and MSVC extensions.
Work has been done on C++ support but is not available.
The reason is that supporting C++ is a huge amount of work
and that not all C++ constructs are handled yet.

>2. What algorithms are implemented for interval analysis? How precise is 
>the analysis? Are values of dynamic objects taken into consideration?

The value analysis is based on the theoretical framework
of Abstract Interpretation:
http://en.wikipedia.org/wiki/Abstract_interpretation

We find the analysis to be quite precise, and in particular
more precise than what you would get with any other open-source
static analyzer that we know of.
I am not sure I understand the question about
"values of dynamic objects", but if the question is whether
the analyzer can distinguish the different values successively
taken by a variable during the execution, the answer is "yes".

>3. Is there implemented any kind of points-to analysis? Which kind?

The values computed by the value analysis can be adresses
(for instance for the values of pointer variables),
so it directly translates into points-to information.
In the vocabulary that is usual for points-to analyses,
it is path-sensitive, context-sensitive and interprocedural.

>4. How structures and multi-dimensional arrays are supported in 
>implemented analysis types? Is the analysis element- and field-aware?

The value analysis is element-aware and field-aware
(of course for arrays this makes a difference only
when the expression used as an indice can be evaluated
with enough precision. There are a number of settings to
improve precision at the cost of more time and memory use).

In fact, casts between pointers to different structs,
and casts between pointers to structs and pointers to arrays,
are handled with precision too.

>5. Which generic types of analysis are implemented? 
>(Path-sensitive/insensitive, Context-sensitive/insensitive, 
>Inter-procedural/intra-procedural, ...)

CIL, the front-end on which Frama-C is based, provides
generic forward and backward generic dataflow analyses
that can be used for implementing path-sensitive or insensitive,
context-sensitive or insensitive, and inter- or intra-procedural
analyses. The value analysis and other analyses such
as the functional dependencies computation are
implemented using these generic analyses, and the simplest
of these analyses can be used as examples.

>6. Which companies/institutions/research groups/... has used Frama-C 
>framework successfully?

I would feel a little uncomfortable dropping names, so I will let
industrial and academic partners come forward
if they wish to (note that there are hints
about where Frama-C is in use in the archives of this 
very mailing-list).

>7. Has any tests been conducted on real applicability of Frama-C 
>framework? (For instance to analyzing or verifying any commercial or 
>opensource software) 

Again, confidentiality rules prevent us from having all the
details, not to mention giving them to you. We have heard about
projects of tens (or hundreds) of thousands lines of embedded
C code on which the value analysis was providing useful results
in hours (or days) of computations and hundreds of megabytes
(or gigabytes) of memory. Your mileage may vary, it very much
depends on the nature of the code you want to analyze.

A tutorial that will double as a
demonstration of the value analysis' capabilities on
"real" software should be available very soon.

----------------------------------------------------------------------------------

>Let's consider a program that builds a large graph (tree or linked list) 
>in dynamic memory. Each element of the graph is a structure containing 
>fields with data. Will the implemented analysis be able to define right 
>and precise values for each member of this graph on the heap?

Warning: long answer coming up.

While it can theoretically be useful to run the value analysis on deterministic
programs that always execute the same computation and return the
same result every time, it is most useful in practice when there is
non-determinism in the execution -- for instance, the program
accepts some inputs that are subsequently used for computing
something. This non-determinism is typically introduced with
built-ins provided for this purpose (there are other ways too).
One of these built-ins is for instance 
called Frama_C_interval(int, int); This is useful to specify
expected ranges for inputs, values from sensors, ...

The answer to your question completely depends whether there
is non-determinism in the shape of the allocated blocks (the way
they point to one another). If there isn't
(say, the non-determinism is only in the integer values of the
data fields), then it is likely possible to make a precise analysis.
An example of such a program is used as a benchmark in
the article there:
http://portal.acm.org/citation.cfm?doid=1411304.1411308
I'll send you a copy if you do not have the necessary subscription.
This example uses a modelization of malloc where each invocation
of malloc creates a new variable. This breaks the widening
mechanism, so if there are some calls to malloc inside a loop,
this loop needs to be completely unrolled. Apart from that,
this modelization works very well when the "no non-determinism
in the shape" restriction applies. It even detects out-of-bound
accesses to a dynamically allocated block.

If there is non-determinism in the shape of the allocated blocks,
you may still get a result that is good enough for you with
one of the other malloc modelizations, but even if one of them
work, you shouldn't expect the results to be as precise.

>What are 
>approximate memory requirements for conducting analysis on such a small 
>program building large complex structures in dynamic memory?

The benchmark in the above article is a small program
that allocates many blocks. Thousands of calls to malloc
translated in hundreds of megabytes of memory used by the
analyzer.

>Many existing algorithms use widening and other techniques leading to 
>precision loss and even wrong information. As far as I could understand 
>Frama-C framework is based on abstract interpretation approach, so it 
>bounds the size of programs being analyzed. Especially if each path in 
>the program is considered separately. How could you estimate resources 
>needed for conducting the analysis depending on the size of the program 
>being analyzed?

The figures I gave for the resources earlier and now are only
typical figures for resource use. It all depends on the analyzed program.
Execution paths are merged by default, with an option to keep
a number of them separated. This gives the user control over the
compromise between precision and resources use. 
Even when this option is used, execution paths are automatically merged
when the values of the variables are identical to (or included in) 
the values of another path. With this and other techniques (e.g. hashconsing,
described in the article), resource use is kept to the minimum possible
for representing the final results.

The "final results" are tables indicating the values of variables in each
statement of the analyzed program. If you don't need these tables,
we can show you how to omit updating them during the analysis,
which will greatly reduce memory use.

>By the way, aren't Binary Decision Diagrams used in Frama-C?

It is natural to think that they could, because
value analysis with separation of states feels
very much like "symbolic model checking" where
the "model" is the C program being analyzed.
In particular, if the C program happened to be
a simulation, using boolean variables,
of some kind of logic circuit, the value analysis
(with separation of states) of the program would be
equivalent to model-checking the circuit.
But actual C programs do not have just boolean variables
or variables whose values can conveniently be
encoded in tuples of booleans, so the value
analysis borrows ideas and algorithms from
model-checking without literally relying on BDDs.

And truth be told, "hash-consing" was invented
in functional programming before being popularized
with BDDs, so it's only fair to borrow it back.


-----------------------------------------------------------------------------------

I did a little work on the aWhy Eclipse plugin (mostly cleanups, artwork
and adaptation to Ganymede) to use it with Frama-C. Unfortunately
because of incompatible changes in Why file names it only works with
frama-c-Lithium-20081002+beta1.

Anyhow, the code is available on github:

http://github.com/frama-c-eclipse/frama-c-eclipse/tree/master

The screenshot is here:

http://cloud.github.com/downloads/frama-c-eclipse/frama-c-eclipse/frama-c-eclipse.png

--------------------------------------------------------------------------------------

If you want to see
all proof obligations, you can use the option -why-opt '-all-vc', but
it is mainly intended for debugging purposes only.

------------------------------------------------------------------------------------

Frama-C won't replace your favorite lint checker, it'll add to it.
Put Frama-C right next to your lint checker and use them together.


PS: Or, if there is no available program that checks exactly
the syntactic rules that you want, you can implement them
as a custom Frama-C plug-in, too.

-------------------------------------------------------------------------------------

ACSL is a language that is being defined separately from
the implementation of the tools that use it. The constructs
you are using are part of ACSL but not yet supported in Jessie.

-------------------------------------------------------------------------------------

My opinion is that proving annotations is as least as much difficult as 
programming. Programming is something that you have to learn, and 
improving your programming skill is the same as improving your expertise...

Now, to answer the precise question: when something is not proved 
although you think it is true, I suggest first to insert assertions in 
the code, to state intermediate properties you think are needed to 
obtain a proof. Seeing whether the assertion is proved or not, and 
seeing whether the post-condition is proven when given the assertion, 
will help you to understand.

----------------------------------------------------------------------------

/*@
     ensures \result >= 0.0;
*/
double sqr(double x)
{
    return x * x;
}

1/ A lot of work has been done on floating-point operations
since the last release. That is to say, support for floating-point
operations will be much less partial in the next release than
in Lithium, both for Jessie and for the Value Analysis.

2/ With the value analysis you
need to indicate that the property must be analyzed
by case by adding an assertion x<=0 || x>=0, which
does not incur any additional proof obligation since it
can be verified to hold easily. The same trick may help
automatic theorem provers, if you somehow arrange for
this disjunction to be in the hypotheses, they may have
the idea to study what that means for x*x separately.

3/ With both Jessie or the Value Analysis you will get a 
proof obligation.
You will probably want to use the "strict" model in which
infinites and NaN are treated as unwanted errors when they
occur. In this case the proof obligation is that x*x should
not overflow.
Even with the Full model in Jessie your post-condition does
not hold because NaN is not >=0 (the result can be NaN
when the sqr function is applied to NaN).

-----------------------------------------------------------------------------------

You asked about the different "why" versions. The answer is technical.
Frama-C and Why are both currently in development. Because
of incompatible changes, a particular version of Frama-C only works
with a particular version of Why. Thanks to the dynamic plug-in
technology that is being put in place in Frama-C, this problem
will soon disappear.


------------------------------------------------------------------------------------

>I am interested in learning more about the Frama-C tool, and especially 
>about the memory model it implements for C, before I go any further with it.

Thanks for your interest.
There is not a single memory model. Each plug-in is free to define
the hypotheses it needs. The annotation language, ACSL,
is as memory-model-agnostic as we were able to make it.

Regarding documentation of memory models in jessie, I recommend

http://www.lri.fr/~marche/moy09phd.pdf

the "default" memory model is typed, which allows to assume separation 
properties which are handy in general, but does not allow pointer casts.
When pointer casts occurs, it tries to switch to a more complicated 
memory model. See document above.


--------------------------------------------------------------------------------------
yes, you have to include the jessie/string.h file in order to use the
valid_string predicate since it is defined here. The C prototypes
declared there should conforming to the C standard, i.e. there should
not be any clash. 
Generally speaking, including headers from the standard library is not
really advised (except for the macros), since Frama-C won't know
anything about the function declared there, and thus won't be able to
tell something meaningful about code which uses them. Besides the
jessie/*.h headers, other functions are available in the share
directory of Frama-C (frama-c -print-path will give the exact location),
usually under the form of a prototype with its specification and a
reference implementation (which is better suited for the value analysis
plugin). 
We have some plans to extend that to a sizable portion of the
C standard library, feel free to suggest the functions that you are
missing as candidates for a full specification.

---------------------------------------------------------------------------------------

We have used Splint (www.splint.org) to check our code. Splint uses annotations of the form /*@ ... @*/, which cannot be used together with Jessie. 
On the other hand, Jessie annotations may lead to error messages in Splint. 

---------------------------------------------------------------------------------------------------------

No prover can handle all POs alone, but this is a known fact. It is
better to work with two or more
---------------------------------------------------------------------------------------------





